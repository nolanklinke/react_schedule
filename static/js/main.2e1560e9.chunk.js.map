{"version":3,"sources":["Components/Modal/modal.js","Components/Schedule/Schedule.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClose","event","onCancel","setState","name","phoneNumber","onSubmit","state","handleName","bind","assertThisInitialized","handlePhone","target","value","show","react_default","a","createElement","className","onChange","href","onClick","Component","Schedule","showModal","closeModal","style","bookTime","isBooked","_this2","children","Modal_modal","App","Components_Schedule_Schedule","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e1560e9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./modal.css\";\r\n\r\nclass Modal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    };\r\n    this.handleName = this.handleName.bind(this);\r\n    this.handlePhone = this.handlePhone.bind(this);\r\n  }\r\n\r\n  handleName(event) {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n  handlePhone(event) {\r\n    this.setState({ phoneNumber: event.target.value });\r\n  }\r\n\r\n  onClose = event => {\r\n    this.props.onClose && this.props.onClose(event);\r\n    this.onCancel();\r\n  };\r\n\r\n  onCancel = event => {\r\n    this.setState({\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    });\r\n  };\r\n\r\n  onSubmit = event => {\r\n    this.props.onSubmit && this.props.onSubmit(event);\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.show) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-main\">\r\n          <div className=\"pa2\">\r\n            <h2>Please enter your name and phone number.</h2>\r\n          </div>\r\n          <div>\r\n            <label>Name:</label>\r\n            <br />\r\n            <input\r\n              className=\"pa1 ma1\"\r\n              value={this.state.name}\r\n              onChange={this.handleName}\r\n            />\r\n            <br />\r\n            <label>Phone Number:</label>\r\n            <br />\r\n            <input\r\n              className=\"pa1 ma1\"\r\n              value={this.state.phoneNumber}\r\n              onChange={this.handlePhone}\r\n            />\r\n          </div>\r\n          <a\r\n            href=\"#0\"\r\n            className=\"f6 link dim br-pill ph3 pv2 mb2 dib white bg-dark-green\"\r\n            onClick={this.onSubmit}\r\n          >\r\n            Confirm Time\r\n          </a>\r\n          <a\r\n            href=\"#0\"\r\n            className=\"f6 link dim br-pill ph3 pv2 mb2 dib white bg-dark-red\"\r\n            onClick={this.onClose}\r\n          >\r\n            Cancel\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"../Modal\";\r\n\r\nclass Schedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isBooked: false,\r\n      show: false,\r\n      style: \"f6 link dim br-pill ph3 pv2 mb2 dib white bg-dark-blue\"\r\n    };\r\n  }\r\n\r\n  showModal = event => {\r\n    this.setState({\r\n      show: !this.state.show\r\n    });\r\n  };\r\n\r\n  closeModal = event => {\r\n    this.setState({\r\n      show: false,\r\n      style: \"f6 link dim br-pill ph3 pv2 mb2 dib white bg-dark-blue\"\r\n    });\r\n  };\r\n\r\n  bookTime = event => {\r\n    this.setState({\r\n      show: false,\r\n      style: \"f6 link dim br-pill ph3 pv2 mb2 dib white bg-dark-red\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"tc dib pa2\">\r\n        <a\r\n          href=\"#0\"\r\n          className={this.state.style}\r\n          onClick={event => {\r\n            this.showModal();\r\n          }}\r\n        >\r\n          {this.props.children}\r\n        </a>\r\n        <Modal\r\n          show={this.state.show}\r\n          onClose={this.closeModal}\r\n          onSubmit={this.bookTime}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Schedule;\r\n","import React, { Component } from \"react\";\nimport Schedule from \"./Components/Schedule\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"flex flex-column justify-center\">\n        <div className=\"tc\">\n          <h1>React Scheduler</h1>\n          <p>\n            Select a time slot to book. Confirm your time by clicking the\n            \"Schedule\" Button. Unavaible time slots are in red.\n          </p>\n        </div>\n\n        <Schedule>9:00 AM - 10:00 AM</Schedule>\n        <Schedule>10:00 AM - 11:00 AM</Schedule>\n        <Schedule>11:00 AM - 12:00 PM</Schedule>\n        <Schedule>12:00 PM - 1:00 PM</Schedule>\n        <Schedule> 1:00 PM - 2:00 PM </Schedule>\n        <Schedule> 2:00 PM - 3:00 PM </Schedule>\n        <Schedule> 3:00 PM - 4:00 PM </Schedule>\n        <Schedule> 4:00 PM - 5:00 PM </Schedule>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}